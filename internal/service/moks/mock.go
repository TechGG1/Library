// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	model "github.com/TechGG1/Library/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockLibrary is a mock of Library interface.
type MockLibrary struct {
	ctrl     *gomock.Controller
	recorder *MockLibraryMockRecorder
}

// MockLibraryMockRecorder is the mock recorder for MockLibrary.
type MockLibraryMockRecorder struct {
	mock *MockLibrary
}

// NewMockLibrary creates a new mock instance.
func NewMockLibrary(ctrl *gomock.Controller) *MockLibrary {
	mock := &MockLibrary{ctrl: ctrl}
	mock.recorder = &MockLibraryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLibrary) EXPECT() *MockLibraryMockRecorder {
	return m.recorder
}

// Books mocks base method.
func (m *MockLibrary) Books(ctx context.Context, limit, page int) ([]model.Book, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Books", ctx, limit, page)
	ret0, _ := ret[0].([]model.Book)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Books indicates an expected call of Books.
func (mr *MockLibraryMockRecorder) Books(ctx, limit, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Books", reflect.TypeOf((*MockLibrary)(nil).Books), ctx, limit, page)
}

// CalculateFine mocks base method.
func (m *MockLibrary) CalculateFine(ctx context.Context, rentId int) (*model.Rent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateFine", ctx, rentId)
	ret0, _ := ret[0].(*model.Rent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateFine indicates an expected call of CalculateFine.
func (mr *MockLibraryMockRecorder) CalculateFine(ctx, rentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateFine", reflect.TypeOf((*MockLibrary)(nil).CalculateFine), ctx, rentId)
}

// CreateBook mocks base method.
func (m *MockLibrary) CreateBook(ctx context.Context, book *model.Book) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBook", ctx, book)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockLibraryMockRecorder) CreateBook(ctx, book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockLibrary)(nil).CreateBook), ctx, book)
}

// CreateReader mocks base method.
func (m *MockLibrary) CreateReader(ctx context.Context, reader *model.Reader) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReader", ctx, reader)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReader indicates an expected call of CreateReader.
func (mr *MockLibraryMockRecorder) CreateReader(ctx, reader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReader", reflect.TypeOf((*MockLibrary)(nil).CreateReader), ctx, reader)
}

// CreateRent mocks base method.
func (m *MockLibrary) CreateRent(ctx context.Context, rent *model.Rent) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRent", ctx, rent)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRent indicates an expected call of CreateRent.
func (mr *MockLibraryMockRecorder) CreateRent(ctx, rent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRent", reflect.TypeOf((*MockLibrary)(nil).CreateRent), ctx, rent)
}

// Readers mocks base method.
func (m *MockLibrary) Readers(ctx context.Context, limit, page int) ([]model.Reader, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Readers", ctx, limit, page)
	ret0, _ := ret[0].([]model.Reader)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Readers indicates an expected call of Readers.
func (mr *MockLibraryMockRecorder) Readers(ctx, limit, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Readers", reflect.TypeOf((*MockLibrary)(nil).Readers), ctx, limit, page)
}

// Rents mocks base method.
func (m *MockLibrary) Rents(ctx context.Context, limit, page, readerId int) ([]model.Rent, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rents", ctx, limit, page, readerId)
	ret0, _ := ret[0].([]model.Rent)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Rents indicates an expected call of Rents.
func (mr *MockLibraryMockRecorder) Rents(ctx, limit, page, readerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rents", reflect.TypeOf((*MockLibrary)(nil).Rents), ctx, limit, page, readerId)
}

// UpdateReader mocks base method.
func (m *MockLibrary) UpdateReader(ctx context.Context, reader *model.Reader) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReader", ctx, reader)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReader indicates an expected call of UpdateReader.
func (mr *MockLibraryMockRecorder) UpdateReader(ctx, reader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReader", reflect.TypeOf((*MockLibrary)(nil).UpdateReader), ctx, reader)
}

// UpdateRent mocks base method.
func (m *MockLibrary) UpdateRent(ctx context.Context, rent *model.Rent) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRent", ctx, rent)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRent indicates an expected call of UpdateRent.
func (mr *MockLibraryMockRecorder) UpdateRent(ctx, rent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRent", reflect.TypeOf((*MockLibrary)(nil).UpdateRent), ctx, rent)
}

// MockLibraryRepo is a mock of LibraryRepo interface.
type MockLibraryRepo struct {
	ctrl     *gomock.Controller
	recorder *MockLibraryRepoMockRecorder
}

// MockLibraryRepoMockRecorder is the mock recorder for MockLibraryRepo.
type MockLibraryRepoMockRecorder struct {
	mock *MockLibraryRepo
}

// NewMockLibraryRepo creates a new mock instance.
func NewMockLibraryRepo(ctrl *gomock.Controller) *MockLibraryRepo {
	mock := &MockLibraryRepo{ctrl: ctrl}
	mock.recorder = &MockLibraryRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLibraryRepo) EXPECT() *MockLibraryRepoMockRecorder {
	return m.recorder
}

// BookPricePerDay mocks base method.
func (m *MockLibraryRepo) BookPricePerDay(ctx context.Context, id int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BookPricePerDay", ctx, id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BookPricePerDay indicates an expected call of BookPricePerDay.
func (mr *MockLibraryRepoMockRecorder) BookPricePerDay(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BookPricePerDay", reflect.TypeOf((*MockLibraryRepo)(nil).BookPricePerDay), ctx, id)
}

// BooksWithPage mocks base method.
func (m *MockLibraryRepo) BooksWithPage(ctx context.Context, limit, page int) ([]model.Book, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BooksWithPage", ctx, limit, page)
	ret0, _ := ret[0].([]model.Book)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BooksWithPage indicates an expected call of BooksWithPage.
func (mr *MockLibraryRepoMockRecorder) BooksWithPage(ctx, limit, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BooksWithPage", reflect.TypeOf((*MockLibraryRepo)(nil).BooksWithPage), ctx, limit, page)
}

// CreateBook mocks base method.
func (m *MockLibraryRepo) CreateBook(ctx context.Context, book *model.Book) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBook", ctx, book)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockLibraryRepoMockRecorder) CreateBook(ctx, book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockLibraryRepo)(nil).CreateBook), ctx, book)
}

// CreateReader mocks base method.
func (m *MockLibraryRepo) CreateReader(ctx context.Context, reader *model.Reader) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReader", ctx, reader)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReader indicates an expected call of CreateReader.
func (mr *MockLibraryRepoMockRecorder) CreateReader(ctx, reader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReader", reflect.TypeOf((*MockLibraryRepo)(nil).CreateReader), ctx, reader)
}

// CreateRent mocks base method.
func (m *MockLibraryRepo) CreateRent(ctx context.Context, rent *model.Rent) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRent", ctx, rent)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRent indicates an expected call of CreateRent.
func (mr *MockLibraryRepoMockRecorder) CreateRent(ctx, rent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRent", reflect.TypeOf((*MockLibraryRepo)(nil).CreateRent), ctx, rent)
}

// ReadersWithPage mocks base method.
func (m *MockLibraryRepo) ReadersWithPage(ctx context.Context, limit, page int) ([]model.Reader, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadersWithPage", ctx, limit, page)
	ret0, _ := ret[0].([]model.Reader)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadersWithPage indicates an expected call of ReadersWithPage.
func (mr *MockLibraryRepoMockRecorder) ReadersWithPage(ctx, limit, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadersWithPage", reflect.TypeOf((*MockLibraryRepo)(nil).ReadersWithPage), ctx, limit, page)
}

// RentById mocks base method.
func (m *MockLibraryRepo) RentById(ctx context.Context, id int) (*model.Rent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RentById", ctx, id)
	ret0, _ := ret[0].(*model.Rent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RentById indicates an expected call of RentById.
func (mr *MockLibraryRepoMockRecorder) RentById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RentById", reflect.TypeOf((*MockLibraryRepo)(nil).RentById), ctx, id)
}

// RentsWithPage mocks base method.
func (m *MockLibraryRepo) RentsWithPage(ctx context.Context, limit, page, readerId int) ([]model.Rent, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RentsWithPage", ctx, limit, page, readerId)
	ret0, _ := ret[0].([]model.Rent)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RentsWithPage indicates an expected call of RentsWithPage.
func (mr *MockLibraryRepoMockRecorder) RentsWithPage(ctx, limit, page, readerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RentsWithPage", reflect.TypeOf((*MockLibraryRepo)(nil).RentsWithPage), ctx, limit, page, readerId)
}

// UpdateReader mocks base method.
func (m *MockLibraryRepo) UpdateReader(ctx context.Context, reader *model.Reader) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReader", ctx, reader)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReader indicates an expected call of UpdateReader.
func (mr *MockLibraryRepoMockRecorder) UpdateReader(ctx, reader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReader", reflect.TypeOf((*MockLibraryRepo)(nil).UpdateReader), ctx, reader)
}

// UpdateRent mocks base method.
func (m *MockLibraryRepo) UpdateRent(ctx context.Context, rent *model.Rent) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRent", ctx, rent)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRent indicates an expected call of UpdateRent.
func (mr *MockLibraryRepoMockRecorder) UpdateRent(ctx, rent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRent", reflect.TypeOf((*MockLibraryRepo)(nil).UpdateRent), ctx, rent)
}
